// gttcan_simulator.c
// A simple simulator for 2 GTTCAN nodes communicating with each other

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

// Include the GTTCAN definitions
#include "gttcan.h"

// Simulation time
uint32_t current_sim_time_ms = 0;
uint32_t simulation_end_time_ms = 50000; // Run for 5 seconds

// Node structures
gttcan_t node1;
gttcan_t node2;

// Bus structure to simulate a CAN bus
typedef struct {
    uint32_t frame_id;
    uint64_t data;
    bool frame_pending;
} can_bus_t;

can_bus_t can_bus;

// Function to simulate processing of frames by nodes
void simulate_bus_activity(void);

// Callback functions for Node 1
void node1_transmit_frame(uint32_t frame_id, uint64_t data);
void node1_set_timer(uint32_t delay_ms);
uint64_t node1_read_value(uint16_t data_id);
void node1_write_value(uint16_t data_id, uint64_t data);

// Callback functions for Node 2
void node2_transmit_frame(uint32_t frame_id, uint64_t data);
void node2_set_timer(uint32_t delay_ms);
uint64_t node2_read_value(uint16_t data_id);
void node2_write_value(uint16_t data_id, uint64_t data);

// Timer events for the nodes
typedef struct {
    uint32_t trigger_time;
    uint8_t node_id;
    bool is_active;
} timer_event_t;

timer_event_t node1_timer = {0, 1, false};
timer_event_t node2_timer = {0, 2, false};

// Data storage (whiteboard) for each node
uint64_t node1_data[65536] = {0}; // Using data_id as index
uint64_t node2_data[65536] = {0};

// Global schedule
global_schedule_entry_t global_schedule[MAX_GLOBAL_SCHEDULE_LENGTH] = {
    // Node 1 entries
    {1, 0, REFERENCE_FRAME_DATA_ID},  // Reference frame
    {1, 30, GENERIC_DATA_ID},
    {1, 61, GENERIC_DATA_ID},
    {1, 65, GENERIC_DATA_ID},
    {1, 100, GENERIC_DATA_ID},
    {1, 105, GENERIC_DATA_ID},
    
    // Node 2 entries
    {2, 31, GENERIC_DATA_ID},
    {2, 60, GENERIC_DATA_ID},
    {2, 66, GENERIC_DATA_ID},
    {2, 70, GENERIC_DATA_ID},
};

uint16_t global_schedule_length = 110; // Number of entries in the global schedule

int main(void) {
    // Initialize the CAN bus
    can_bus.frame_pending = false;
    
    printf("GTTCAN Simulator - 2 Nodes\n");
    printf("---------------------------\n\n");

    // Initialize Node 1
    gttcan_init(
        &node1,
        1, // Node ID
        global_schedule,
        global_schedule_length,
        10, // Slot duration in ms
        node1_transmit_frame,
        node1_set_timer,
        node1_read_value,
        node1_write_value
    );

    // Initialize Node 2
    gttcan_init(
        &node2,
        2, // Node ID
        global_schedule,
        global_schedule_length,
        10, // Slot duration in ms
        node2_transmit_frame,
        node2_set_timer,
        node2_read_value,
        node2_write_value
    );

    printf("Node 1 initialized with %d schedule entries\n", node1.local_schedule_length);
    printf("Node 2 initialized with %d schedule entries\n\n", node2.local_schedule_length);

    // Print local schedules
    printf("Node 1 Local Schedule:\n");
    for (int i = 0; i < node1.local_schedule_length; i++) {
        printf("  Entry %d: Slot %d, Data ID %d\n", 
               i, 
               node1.local_schedule[i].slot_id, 
               node1.local_schedule[i].data_id);
    }
    
    printf("\nNode 2 Local Schedule:\n");
    for (int i = 0; i < node2.local_schedule_length; i++) {
        printf("  Entry %d: Slot %d, Data ID %d\n", 
               i, 
               node2.local_schedule[i].slot_id, 
               node2.local_schedule[i].data_id);
    }
    printf("\n");

    // Start Node 1 (master node)
    printf("Starting simulation at time 0ms\n");
    printf("Node 1 starts as master\n\n");
    gttcan_start(&node1);

    // Main simulation loop
    while (current_sim_time_ms < simulation_end_time_ms) {
        // Check for timer events
        if (node1_timer.is_active && current_sim_time_ms >= node1_timer.trigger_time) {
            printf("[%5dms] Node 1 timer triggered\n", current_sim_time_ms);
            node1_timer.is_active = false;
            gttcan_transmit_next_frame(&node1);
        }
        
        if (node2_timer.is_active && current_sim_time_ms >= node2_timer.trigger_time) {
            printf("[%5dms] Node 2 timer triggered\n", current_sim_time_ms);
            node2_timer.is_active = false;
            gttcan_transmit_next_frame(&node2);
        }

        // Check for frames on the bus
        simulate_bus_activity();

        // Advance simulation time
        current_sim_time_ms++;
    }

    printf("\nSimulation ended at %dms\n", current_sim_time_ms);
    return 0;
}

// Callback implementations

void node1_transmit_frame(uint32_t frame_id, uint64_t data) {
    printf("[%5dms] Node 1 sending frame: ID=0x%08X, Data=0x%016llX\n", 
           current_sim_time_ms, frame_id, (unsigned long long)data);
    
    // Put the frame on the bus
    can_bus.frame_id = frame_id;
    can_bus.data = data;
    can_bus.frame_pending = true;
    
    // For display purposes, decode the frame
    uint16_t slot_id = (frame_id >> GTTCAN_NUM_DATA_ID_BITS) & 0xFFFF;
    uint16_t data_id = frame_id & 0xFFFF;
    
    if (data_id == REFERENCE_FRAME_DATA_ID) {
        printf("    - Reference frame at slot %d\n", slot_id);
    } else {
        printf("    - Data frame at slot %d with data_id %d\n", slot_id, data_id);
    }
}

void node2_transmit_frame(uint32_t frame_id, uint64_t data) {
    printf("[%5dms] Node 2 sending frame: ID=0x%08X, Data=0x%016llX\n", 
           current_sim_time_ms, frame_id, (unsigned long long)data);
    
    // Put the frame on the bus
    can_bus.frame_id = frame_id;
    can_bus.data = data;
    can_bus.frame_pending = true;
    
    // For display purposes, decode the frame
    uint16_t slot_id = (frame_id >> GTTCAN_NUM_DATA_ID_BITS) & 0xFFFF;
    uint16_t data_id = frame_id & 0xFFFF;
    
    if (data_id == REFERENCE_FRAME_DATA_ID) {
        printf("    - Reference frame at slot %d\n", slot_id);
    } else {
        printf("    - Data frame at slot %d with data_id %d\n", slot_id, data_id);
    }
}

void node1_set_timer(uint32_t delay_ms) {
    node1_timer.trigger_time = current_sim_time_ms + delay_ms;
    node1_timer.is_active = true;
    printf("[%5dms] Node 1 timer set to trigger at %dms (delay: %dms)\n", 
           current_sim_time_ms, node1_timer.trigger_time, delay_ms);
}

void node2_set_timer(uint32_t delay_ms) {
    node2_timer.trigger_time = current_sim_time_ms + delay_ms;
    node2_timer.is_active = true;
    printf("[%5dms] Node 2 timer set to trigger at %dms (delay: %dms)\n", 
           current_sim_time_ms, node2_timer.trigger_time, delay_ms);
}

uint64_t node1_read_value(uint16_t data_id) {
    return node1_data[data_id];
}

void node1_write_value(uint16_t data_id, uint64_t data) {
    node1_data[data_id] = data;
    printf("[%5dms] Node 1 wrote value 0x%016llX to data_id %d\n", 
           current_sim_time_ms, (unsigned long long)data, data_id);
}

uint64_t node2_read_value(uint16_t data_id) {
    return node2_data[data_id];
}

void node2_write_value(uint16_t data_id, uint64_t data) {
    node2_data[data_id] = data;
    printf("[%5dms] Node 2 wrote value 0x%016llX to data_id %d\n", 
           current_sim_time_ms, (unsigned long long)data, data_id);
}

void simulate_bus_activity(void) {
    if (can_bus.frame_pending) {
        // Both nodes receive all frames
        gttcan_process_frame(&node1, can_bus.frame_id, can_bus.data);
        gttcan_process_frame(&node2, can_bus.frame_id, can_bus.data);
        
        can_bus.frame_pending = false;
    }
}